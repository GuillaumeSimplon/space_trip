{# templates/components/carouselResort.html.twig #}



{% block carouselResort %}
<div>
    <div class="carouselResorts">
        <div class="hideBorderRight"></div>
        <div class="hideBorderLeft"></div>
        <div id="image-track" data-mouse-down-at="0" data-prev-percentage="0">
            {% for imagePath in imagePaths %}
            <img class="image" src="{{ asset('img/Resorts/' ~ imagePath) }}" draggable="false" alt="">
            {% endfor %}
        </div>
    </div>
</div>

<style>
/* body {
    height: 100vh;
    width: 100vw;
    background-color: rgb(30, 30, 40);
    margin: 0rem;
    overflow: hidden;
  } */


.hideBorderLeft {
    z-index: 9999;
    position: absolute;
    width: 300px;
    height: 100%;
    /* background-color: red; */
    background: linear-gradient(to right, #00071F, #00071F00);
    left: 0;
}

  .carouselResorts {
    width: 100%;
    height: 400px;
    position: relative;
 }  

  #image-track {
    display: flex;
    gap: 3vmin;
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(0%, -50%); 
    user-select: none; /* -- Prevent image highlighting -- */
  }
  
  #image-track > .image {
    /* width: 40vmin;
    height: 56vmin; */
    width: 150px;
    height: 300px;
    object-fit: cover;
    object-position: 100% center;
    cursor: pointer;
    border: 1px solid rgb(100, 100, 100);
    border-radius: 8px;
    box-shadow: 0px 4px 16px black;
  }
</style>



<script>
    const track = document.getElementById("image-track");

const handleOnDown = e => track.dataset.mouseDownAt = e.clientX;

const handleOnUp = () => {
  track.dataset.mouseDownAt = "0";
  track.dataset.prevPercentage = track.dataset.percentage;
}

const handleOnMove = e => {
  if (track.dataset.mouseDownAt === "0") return;

  const mouseDelta = parseFloat(track.dataset.mouseDownAt) - e.clientX,
    maxDelta = window.innerWidth / 1;

  const percentage = (mouseDelta / maxDelta) * -100;
  const nextPercentageUnconstrained = parseFloat(track.dataset.prevPercentage) + percentage;
  const nextPercentage = Math.max(Math.min(nextPercentageUnconstrained, 0), -100);

  track.dataset.percentage = nextPercentage;

  track.animate({
    transform: `translate(${nextPercentage}%, -50%)`
  }, { duration: 1200, fill: "forwards" });

  for (const image of track.getElementsByClassName("image")) {
    image.animate({
      objectPosition: `${100 + nextPercentage}% center`
    }, { duration: 1200, fill: "forwards" });
  }
}

/* -- Had to add extra lines for touch events -- */

window.onmousedown = e => handleOnDown(e);
window.ontouchstart = e => handleOnDown(e.touches[0]);
window.onmouseup = e => handleOnUp(e);
window.ontouchend = e => handleOnUp(e.touches[0]);
window.onmousemove = e => handleOnMove(e);
window.ontouchmove = e => handleOnMove(e.touches[0]);
</script>
{% endblock %}